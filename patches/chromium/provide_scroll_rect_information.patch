From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Izzy Swart <zenerboson@gmail.com>
Date: Mon, 1 Jul 2024 19:23:44 -0400
Subject: Provide scroll rect information


diff --git a/third_party/blink/public/devtools_protocol/browser_protocol.pdl b/third_party/blink/public/devtools_protocol/browser_protocol.pdl
index 123c6e48212adedf713e5008892d0526084fdef6..cd79042d4ecdd3ee08818f805c344ec3093018ed 100644
--- a/third_party/blink/public/devtools_protocol/browser_protocol.pdl
+++ b/third_party/blink/public/devtools_protocol/browser_protocol.pdl
@@ -5029,6 +5029,8 @@ experimental domain LayerTree
       optional array of ScrollRect scrollRects
       # Sticky position constraint information
       optional StickyPositionConstraint stickyPositionConstraint
+      # Clip rect for scroll container
+      optional DOM.Rect scrollClipRect
 
   # Array of timings, one per paint step.
   type PaintProfile extends array of number
@@ -5068,11 +5070,11 @@ experimental domain LayerTree
       # The id of the layer snapshot.
       SnapshotId snapshotId
     
-  # Dumps a snapshot of the layer tree
-  command dumpSnapshot
+  # Dumps a snapshot of the SkPicture for a layer
+  command dumpPicture
     parameters
-      # The id of the layer snapshot.
-      SnapshotId snapshotId
+      # The id of the layer
+      LayerId layerId
       # Include only typefaces with these ids
       optional array of integer typefaceFilter
       # Include only images with these ids
diff --git a/third_party/blink/renderer/core/inspector/inspector_layer_tree_agent.cc b/third_party/blink/renderer/core/inspector/inspector_layer_tree_agent.cc
index 2668bb7af70ab2d419a84fc3850472c9f3b13fbc..47c74dad25f2c9866b63a295efe2d2b0226b70b8 100644
--- a/third_party/blink/renderer/core/inspector/inspector_layer_tree_agent.cc
+++ b/third_party/blink/renderer/core/inspector/inspector_layer_tree_agent.cc
@@ -250,6 +250,20 @@ static std::unique_ptr<protocol::LayerTree::Layer> BuildObjectForLayer(
   if (sticky_info) {
     layer_object->setStickyPositionConstraint(std::move(sticky_info));
   }
+  auto scrollTreeIndex = layer->scroll_tree_index();
+  if (scrollTreeIndex != cc::kInvalidNodeId) {
+    const cc::ScrollTree& scrollTree =
+        root->layer_tree_host()->property_trees()->scroll_tree();
+    auto elementId = scrollTree.Node(scrollTreeIndex)->element_id;
+    auto offset = scrollTree.current_scroll_offset(elementId);
+    gfx::Size containerBounds = scrollTree.container_bounds(scrollTreeIndex);
+    layer_object->setScrollClipRect(protocol::DOM::Rect::create()
+                                        .setX(offset.x())
+                                        .setY(offset.y())
+                                        .setHeight(containerBounds.height())
+                                        .setWidth(containerBounds.width())
+                                        .build());
+  }
   return layer_object;
 }
 
@@ -465,17 +479,11 @@ protocol::Response InspectorLayerTreeAgent::loadSnapshot(
   return protocol::Response::Success();
 }
 
-protocol::Response InspectorLayerTreeAgent::dumpSnapshot(
-    const String& snapshot_id,
+protocol::Response InspectorLayerTreeAgent::dumpPicture(
+    const String& layer_id,
     Maybe<protocol::Array<int>> typeface_filter,
     Maybe<protocol::Array<int>> image_filter,
     protocol::Binary* picture) {
-  const PictureSnapshot* snapshot = nullptr;
-  protocol::Response response = GetSnapshotById(snapshot_id, snapshot);
-  if (!response.IsSuccess()) {
-    return response;
-  }
-
   Vector<uint32_t> typeface_filter_ids;
   if (typeface_filter.has_value()) {
     for (int id : *typeface_filter) {
@@ -490,6 +498,23 @@ protocol::Response InspectorLayerTreeAgent::dumpSnapshot(
     }
   }
 
+  const cc::Layer* layer = nullptr;
+  protocol::Response response = LayerById(layer_id, layer);
+  if (!response.IsSuccess()) {
+    return response;
+  }
+  if (!layer->draws_content()) {
+    return protocol::Response::ServerError("Layer does not draw content");
+  }
+
+  auto layerPicture = layer->GetPicture();
+  if (!layerPicture) {
+    return protocol::Response::ServerError("Layer does not produce picture");
+  }
+
+  auto snapshot =
+      base::MakeRefCounted<PictureSnapshot>(std::move(layerPicture));
+
   Vector<uint8_t> data =
       snapshot->Dump(typeface_filter.has_value(), typeface_filter_ids,
                      image_filter.has_value(), image_filter_ids);
diff --git a/third_party/blink/renderer/core/inspector/inspector_layer_tree_agent.h b/third_party/blink/renderer/core/inspector/inspector_layer_tree_agent.h
index 0b2feaeb16ae7fa9ef7fbd2381e25af900e32d5e..9045035479cd2a7f9aecb66d824bfd4d2f942dc2 100644
--- a/third_party/blink/renderer/core/inspector/inspector_layer_tree_agent.h
+++ b/third_party/blink/renderer/core/inspector/inspector_layer_tree_agent.h
@@ -80,8 +80,8 @@ class CORE_EXPORT InspectorLayerTreeAgent final
   protocol::Response loadSnapshot(
       std::unique_ptr<protocol::Array<protocol::LayerTree::PictureTile>> tiles,
       String* snapshot_id) override;
-  protocol::Response dumpSnapshot(
-      const String& snapshot_id,
+  protocol::Response dumpPicture(
+      const String& layer_id,
       protocol::Maybe<protocol::Array<int>> typeface_filter,
       protocol::Maybe<protocol::Array<int>> image_filter,
       protocol::Binary* picture) override;
